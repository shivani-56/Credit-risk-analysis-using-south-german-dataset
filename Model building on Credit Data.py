{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d340ebc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, cross_val_score,KFold, RepeatedStratifiedKFold\n",
    "from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,AdaBoostClassifier\n",
    "from sklearn.metrics import accuracy_score,confusion_matrix,precision_score,recall_score\n",
    "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n",
    "from sklearn.linear_model import SGDClassifier,LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import BaggingClassifier\n",
    "from imblearn.over_sampling import ADASYN\n",
    "from lightgbm import LGBMClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from collections import Counter\n",
    "from scipy.stats import randint\n",
    "from sklearn.svm import SVC\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import warnings\n",
    "import pickle\n",
    "\n",
    "\n",
    "pd.set_option('display.max_columns',None)\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "\n",
    "df = pd.read_csv(r\"C:\\Users\\Lenovo\\PycharmProjects\\GermanBankCreditCard\\SouthGermanCredit\\Final_Model.csv\")\n",
    "df.drop(['Unnamed: 0'],axis=1,inplace=True)\n",
    "\n",
    "\n",
    "X=df.drop(['credit_risk'],axis=1)\n",
    "y=df['credit_risk']\n",
    "\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "\n",
    "def model(X=X_train, y=y_train):\n",
    "    \n",
    "    models=[]\n",
    "    models.append(('GradientBoostingClassifier',GradientBoostingClassifier()))\n",
    "    models.append(('XGBClassifier',XGBClassifier(eval_metric='mlogloss')))\n",
    "    models.append(('DecisionTreeClassifier',DecisionTreeClassifier()))\n",
    "    models.append(('RandomForestClassifier',RandomForestClassifier()))\n",
    "    models.append(('AdaBoostClassifier',AdaBoostClassifier()))\n",
    "    models.append(('LogisticRegression',LogisticRegression()))\n",
    "    models.append(('BaggingClassifier',BaggingClassifier()))\n",
    "    models.append(('LGBMClassifier',LGBMClassifier()))\n",
    "    models.append(('SGDClassifier',SGDClassifier()))\n",
    "    models.append(('SVC',SVC()))\n",
    "    \n",
    "    results =[]\n",
    "    names   =[]\n",
    "    scoring ='accuracy'\n",
    "    \n",
    "    for name, model in models:\n",
    "        #kfold = KFold(n_splits=10, random_state=42)\n",
    "        kfold = RepeatedStratifiedKFold(n_splits=10, random_state=42, n_repeats=3)\n",
    "        cross = cross_val_score(model, X, y, cv=kfold, scoring=scoring)\n",
    "        results.append(cross)\n",
    "        names.append(name)\n",
    "        print (f'Model:{name},Mean: {cross.mean()},Std Dev: {cross.std()}')\n",
    "        print('---'*25)\n",
    "\n",
    "model(X_train,y_train)\n",
    "\n",
    "\n",
    "ada = ADASYN(sampling_strategy='minority',random_state=42,n_neighbors=7)\n",
    "X_res,y_res = ada.fit_resample(X_train,y_train)\n",
    "Counter(y_res)\n",
    "\n",
    "\n",
    "model(X_res,y_res)\n",
    "\n",
    "\n",
    "param_distribs = {'n_estimators': randint(low=1, high=500),\n",
    "                  'max_depth': randint(low=1, high=10),\n",
    "                  'max_features':randint(low=1,high=10),\n",
    "                 }\n",
    "\n",
    "rnd_RF = RandomizedSearchCV(RandomForestClassifier(),param_distributions=param_distribs,n_iter=10,cv=5,scoring='accuracy', \n",
    "                            random_state=42)\n",
    "\n",
    "rnd_RF.fit(X_res,y_res)\n",
    "rnd_RF.best_params_\n",
    "\n",
    "\n",
    "RFClassifier = RandomForestClassifier(max_depth=8, max_features=5, n_estimators=103, random_state=42)\n",
    "RFClassifier.fit(X_res,y_res)\n",
    "\n",
    "\n",
    "param_grid = [{'n_estimators': [3, 10, 30], 'max_depth': [2, 4, 6, 8],'booster': ['gbtree','dart'],\n",
    "              'learning_rate':[0.3,0.5,0.01,0.1]}]\n",
    "\n",
    "grid_xgb = GridSearchCV(XGBClassifier(eval_metric='mlogloss'), param_grid=param_grid, cv=5, scoring='accuracy', \n",
    "                        return_train_score=True)\n",
    "\n",
    "grid_xgb.fit(X_res,y_res)\n",
    "grid_xgb.best_params_\n",
    "\n",
    "\n",
    "XGClassifier=XGBClassifier(booster='gbtree', learning_rate=0.5, max_depth=8, n_estimators=30, eval_metric='mlogloss')\n",
    "XGClassifier.fit(X_res,y_res)\n",
    "\n",
    "\n",
    "BClassifier = BaggingClassifier(base_estimator=XGBClassifier(eval_metric='mlogloss'),random_state=42)\n",
    "BClassifier.fit(X_res,y_res)\n",
    "\n",
    "\n",
    "LGBClassifier=LGBMClassifier(random_state=42)\n",
    "LGBClassifier.fit(X_res,y_res)\n",
    "\n",
    "\n",
    "GBClassifier=GradientBoostingClassifier(random_state=42)\n",
    "GBClassifier.fit(X_res,y_res)\n",
    "\n",
    "\n",
    "prediction_RF = RFClassifier.predict(X_test)\n",
    "\n",
    "prediction_XGB = XGClassifier.predict(X_test)\n",
    "\n",
    "prediction_Bagg = BClassifier.predict(X_test)\n",
    "\n",
    "prediction_LGBM = LGBClassifier.predict(X_test)\n",
    "\n",
    "prediction_GB = GBClassifier.predict(X_test)\n",
    "\n",
    "\n",
    "print('Accuracy RForest...{}'.format(accuracy_score(y_test,prediction_RF)))\n",
    "print('---'*25)\n",
    "print('Accuracy XGBoost...{}'.format(accuracy_score(y_test,prediction_XGB)))\n",
    "print('---'*25)\n",
    "print('Accuracy Bagging...{}'.format(accuracy_score(y_test,prediction_Bagg)))\n",
    "print('---'*25)\n",
    "print('Accuracy LightGBM...{}'.format(accuracy_score(y_test,prediction_LGBM)))\n",
    "print('---'*25)\n",
    "print('Accuracy Gradient...{}'.format(accuracy_score(y_test,prediction_GB)))\n",
    "print('---'*25)\n",
    "\n",
    "\n",
    "print('Precision RForest...{}'.format(precision_score(y_test,prediction_RF)))\n",
    "print('---'*25)\n",
    "print('Precision XGBoost...{}'.format(precision_score(y_test,prediction_XGB)))\n",
    "print('---'*25)\n",
    "print('Precision Bagging...{}'.format(precision_score(y_test,prediction_Bagg)))\n",
    "print('---'*25)\n",
    "print('Precision LightGBM...{}'.format(precision_score(y_test,prediction_LGBM)))\n",
    "print('---'*25)\n",
    "print('Precision Gradient...{}'.format(precision_score(y_test,prediction_GB)))\n",
    "print('---'*25)\n",
    "\n",
    "\n",
    "print('Recall RForest...{}'.format(recall_score(y_test,prediction_RF)))\n",
    "print('---'*25)\n",
    "print('Recall XGBoost...{}'.format(recall_score(y_test,prediction_XGB)))\n",
    "print('---'*25)\n",
    "print('Recall Bagging...{}'.format(recall_score(y_test,prediction_Bagg)))\n",
    "print('---'*25)\n",
    "print('Recall LightGBM...{}'.format(recall_score(y_test,prediction_LGBM)))\n",
    "print('---'*25)\n",
    "print('Recall Gradient...{}'.format(recall_score(y_test,prediction_GB)))\n",
    "print('---'*25)\n",
    "\n",
    "\n",
    "print('Confusion Matrix RForest... \\n {}'.format(confusion_matrix(y_test,prediction_RF)))\n",
    "print('---'*25)\n",
    "print('Confusion Matrix XGBoost... \\n {}'.format(confusion_matrix(y_test,prediction_XGB)))\n",
    "print('---'*25)\n",
    "print('Confusion Matrix Bagging... \\n {}'.format(confusion_matrix(y_test,prediction_Bagg)))\n",
    "print('---'*25)\n",
    "print('Confusion Matrix LightGBM... \\n {}'.format(confusion_matrix(y_test,prediction_LGBM)))\n",
    "print('---'*25)\n",
    "print('Confusion Matrix Gradient... \\n {}'.format(confusion_matrix(y_test,prediction_GB)))\n",
    "print('---'*25)\n",
    "\n",
    "\n",
    "file = 'Credit_Data_RF.pkl'\n",
    "\n",
    "pickle.dump(RFClassifier,open(file,'wb'))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
