{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "983ccc77",
   "metadata": {},
   "outputs": [],
   "source": [
    "from application_logging.logger import logger\n",
    "from flask import Flask, request, render_template\n",
    "from flask_cors import cross_origin\n",
    "import pickle\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "logger = logger('log_Files/application.log')\n",
    "\n",
    "model = pickle.load(open('Scaler_Credit_Data.pkl', 'rb'))\n",
    "model2 = pickle.load(open('Credit_Data_RF.pkl', 'rb'))\n",
    "\n",
    "\n",
    "@app.route(\"/\", methods=['GET', 'POST'])\n",
    "@cross_origin()\n",
    "def home():\n",
    "    \"\"\"\n",
    "    :Method_Name: home\n",
    "    :DESC: This Will Return The Home Page\n",
    "    :param: None\n",
    "    :return: index.html\n",
    "    \"\"\"\n",
    "\n",
    "    try:\n",
    "        logger.info('INFO', 'The Home Method Call The index.html Page')\n",
    "        return render_template('index.html')\n",
    "\n",
    "    except Exception as e:\n",
    "        logger.info('INFO', 'Something Went Wrong With The Home Method')\n",
    "        raise Exception(f'(Home)- Something Went Wrong With The Method \\n' + str(e))\n",
    "\n",
    "\n",
    "@app.route(\"/report\", methods=['GET', 'POST'])\n",
    "@cross_origin()\n",
    "def report():\n",
    "    \"\"\"\n",
    "    :Method_Name: report\n",
    "    :DESC: This Will Return The  Data Report Page\n",
    "    :param: None\n",
    "    :return: report.html\n",
    "    \"\"\"\n",
    "\n",
    "    try:\n",
    "        logger.info('INFO', 'The Home Method Call The index.html Page')\n",
    "        return render_template('German_Credit_Data.html')\n",
    "\n",
    "    except Exception as e:\n",
    "        logger.info('INFO', 'Something Went Wrong With The Home Method')\n",
    "        raise Exception(f'(Home)- Something Went Wrong With The Method \\n' + str(e))\n",
    "\n",
    "\n",
    "@app.route(\"/predict\", methods=['POST'])\n",
    "@cross_origin()\n",
    "def predict():\n",
    "    \"\"\"\n",
    "    :Method_Name: predict\n",
    "    :DESC: This Will Return The Credit Risk Is Bad or Good\n",
    "    :param: None\n",
    "    :return: The Risk Is Bad or Good\n",
    "    \"\"\"\n",
    "\n",
    "    try:\n",
    "        logger.info('INFO', 'Checking The Method Is Post Or Not')\n",
    "        if request.method == \"POST\":\n",
    "\n",
    "            try:\n",
    "                logger.info('INFO', 'The Post Method Is Call & Calling The Each Feature')\n",
    "\n",
    "                status = int(request.form['status'])\n",
    "\n",
    "                duration = int(request.form['duration'])\n",
    "\n",
    "                credit_history = int(request.form['credit_history'])\n",
    "\n",
    "                purpose = int(request.form['purpose'])\n",
    "\n",
    "                amount = int(request.form['amount'])\n",
    "\n",
    "                savings = int(request.form['savings'])\n",
    "\n",
    "                employment_duration = int(request.form['employment_duration'])\n",
    "\n",
    "                personal_status_sex = int(request.form['personal_status_sex'])\n",
    "\n",
    "                installment_rate = int(request.form['installment_rate'])\n",
    "\n",
    "                present_residence = int(request.form['present_residence'])\n",
    "\n",
    "                property = int(request.form['property'])\n",
    "\n",
    "                age = int(request.form['age'])\n",
    "\n",
    "                number_credits = int(request.form['number_credits'])\n",
    "\n",
    "                telephone = int(request.form['telephone'])\n",
    "\n",
    "                value = model.transform([[status, duration, credit_history, purpose, amount, savings,\n",
    "                                          employment_duration, personal_status_sex, installment_rate,\n",
    "                                          present_residence, property, age, number_credits, telephone]])\n",
    "\n",
    "                prediction = model2.predict(value)\n",
    "\n",
    "                if prediction == 0:\n",
    "                    label = 'Bad'\n",
    "                else:\n",
    "                    label = 'Good'\n",
    "\n",
    "                return render_template('result.html', prediction_text=\" The Credit Risk Is {}\".format(label))\n",
    "\n",
    "            except Exception as e:\n",
    "                logger.info('INFO', 'Something Went Wrong With The Post From Predict Method')\n",
    "                raise Exception(f'(Predict)- Something Went Wrong With The Method \\n' + str(e))\n",
    "\n",
    "        else:\n",
    "            logger.info('INFO', 'The Post Method Is Not Selected')\n",
    "            return render_template('index.html')\n",
    "\n",
    "    except Exception as e:\n",
    "        logger.info('INFO', 'Something Went Wrong With The Home Method')\n",
    "        raise Exception(f'(Predict)- Something Went Wrong With The Method \\n' + str(e))\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
